name: Train (SageMaker)

on:
  workflow_dispatch:
    inputs:
      deploy_after:
        description: "학습 후 ECS 재시작?"
        type: boolean
        default: true
  push:
    branches: [ main ]
    paths:
      - "scripts/**"
      - ".github/workflows/train.yml"

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-northeast-2
  MODEL_REPO: devops-lab

jobs:
  train:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install boto3 sagemaker==2.* scikit-learn==1.4.2 joblib==1.4.2

      - name: Get TF outputs
        id: tfout
        working-directory: infra
        run: |
          echo "bucket=$(terraform output -raw model_bucket)" >> $GITHUB_OUTPUT
          echo "exec_arn=$(terraform output -raw sm_training_exec_role_arn)" >> $GITHUB_OUTPUT
          echo "registry=$(terraform output -raw sm_model_package_group || echo '')" >> $GITHUB_OUTPUT

      - name: Submit SageMaker TrainingJob
        id: submit
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          MODEL_BUCKET: ${{ steps.tfout.outputs.bucket }}
          MODEL_REPO: ${{ env.MODEL_REPO }}
          SM_TRAIN_EXEC_ROLE_ARN: ${{ steps.tfout.outputs.exec_arn }}
        run: |
          python scripts/submit_sm_training.py > sm_result.json
          cat sm_result.json
          echo "job_name=$(jq -r .job_name sm_result.json)" >> $GITHUB_OUTPUT
          echo "artifact=$(jq -r .model_artifacts sm_result.json)" >> $GITHUB_OUTPUT

      - name: Extract model.pkl & publish to versioned path
        id: publish
        env:
          BUCKET: ${{ steps.tfout.outputs.bucket }}
          ARTIFACT: ${{ steps.submit.outputs.artifact }}
          REPO: ${{ env.MODEL_REPO }}
        run: |
          set -euo pipefail
          VERSION="$(date -u +%Y%m%d%H%M%S)"
          aws s3 cp "$ARTIFACT" /tmp/model.tar.gz
          mkdir -p /tmp/model && tar -xzf /tmp/model.tar.gz -C /tmp/model
          test -f /tmp/model/model.pkl
          aws s3 cp /tmp/model/model.pkl "s3://$BUCKET/models/$REPO/$VERSION/model.pkl"
          aws s3 cp /tmp/model/model.pkl "s3://$BUCKET/models/$REPO/latest/model.pkl"
          aws s3 cp <(jq -n --arg v "$VERSION" '{"version":$v,"source":"sagemaker"}') \
            "s3://$BUCKET/models/$REPO/latest/metadata.json" --content-type application/json
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # (선택) SageMaker Model Registry에 패키지 등록 (간단 등록)
      - name: Register to Model Registry (optional)
        if: ${{ steps.tfout.outputs.registry != '' }}
        env:
          GROUP: ${{ steps.tfout.outputs.registry }}
          ARTIFACT: ${{ steps.submit.outputs.artifact }}
        run: |
          python - << 'PY'
          import os, boto3, json
          sm = boto3.client("sagemaker", region_name=os.environ["AWS_REGION"])
          # 간단 등록: 데이터만 올리고 컨테이너 추론이미지는 생략(평가/메타용). 실전은 inference image 지정 권장.
          resp = sm.create_model_package(
              ModelPackageGroupName=os.environ["GROUP"],
              ModelPackageDescription="Registered from CI",
              ModelApprovalStatus="Approved",
              InferenceSpecification={
                  "Containers": [{"ModelDataUrl": os.environ["ARTIFACT"], "Image":"246618743249.dkr.ecr."+os.environ["AWS_REGION"]+".amazonaws.com/sagemaker-scikit-learn:1.2-1-cpu-py3"}],
                  "SupportedContentTypes":["application/json"],
                  "SupportedResponseMIMETypes":["application/json"]
              }
          )
          print(json.dumps({"model_package_arn":resp["ModelPackageArn"]}))
          PY

      - name: (Optional) Force ECS rolling restart
        if: ${{ inputs.deploy_after || github.event_name == 'push' }}
        env:
          CLUSTER: ${{ secrets.ECS_CLUSTER }}
          SERVICE: ${{ secrets.ECS_SERVICE }}
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          aws ecs update-service --cluster "$CLUSTER" --service "$SERVICE" \
            --force-new-deployment --region "$AWS_REGION"
